service: tripcheck-service # サービス名

frameworkVersion: '4' # Serverless Framework バージョン指定

custom:
  stage: ${opt:stage, 'dev'} # デフォルトステージはdev
  region: ap-northeast-1 # 東京リージョン
  tableName: ${self:service}-plans-${self:custom.stage} # DynamoDB テーブル名

provider:
  name: aws # プロバイダはAWS
  runtime: nodejs22.x # Lambdaランタイム
  region: ap-northeast-1 # リージョン設定
  stage: ${self:custom.stage} # ステージ設定
  memorySize: 256 # Lambdaのメモリ
  deploymentBucket:
    name: tripcheck-deployment-${self:custom.stage} # デプロイ用S3バケット名
    serverSideEncryption: AES256 # バケットの暗号化

  apiGateway:
    shouldStartNameWithService: true # API Gateway名にサービス名をつける

  # HTTP APIの設定
  httpApi:
    cors: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'Fn::GetAtt': [PlanTable, Arn] # DynamoDBテーブルのARN

  environment:
    TABLE_NAME: ${self:custom.tableName}
    GOOGLE_MAPS_API_KEY: ${env:GOOGLE_MAPS_API_KEY}

package:
  individually: true # 関数ごとに個別パッケージ
  patterns:
    - '!test/**' # テストフォルダを除外
    - '!src/index.ts' # 不要ファイルを除外

functions:
  # Plan
  get-plan:
    handler: src/functions/get-plan.handler
    reservedConcurrency: 5
    events:
      - httpApi:
          path: /v1/plans
          method: get
          authorizers:
            TripCheckJwtAuthorizer:
              type: jwt
              identitySource: $request.header.Authorization
              audience:
                - 74mtj0sj8kpi7bckr84o2fskie
              issuerUrl: https://cognito-idp.ap-northeast-1.amazonaws.com/ap-northeast-1_fd8pKPCYd

  get-plan-by-id:
    handler: src/functions/get-plan-by-id.handler
    reservedConcurrency: 5
    events:
      - httpApi:
          path: /v1/plans/{id}
          method: get
          authorizers:
            TripCheckJwtAuthorizer:
              type: jwt
              identitySource: $request.header.Authorization
              audience:
                - 74mtj0sj8kpi7bckr84o2fskie
              issuerUrl: https://cognito-idp.ap-northeast-1.amazonaws.com/ap-northeast-1_fd8pKPCYd

  create-plan:
    handler: src/functions/create-plan.handler
    reservedConcurrency: 5
    events:
      - httpApi:
          path: /v1/plans
          method: post
          authorizers:
            TripCheckJwtAuthorizer:
              type: jwt
              identitySource: $request.header.Authorization
              audience:
                - 74mtj0sj8kpi7bckr84o2fskie
              issuerUrl: https://cognito-idp.ap-northeast-1.amazonaws.com/ap-northeast-1_fd8pKPCYd

  update-plan:
    handler: src/functions/create-plan.handler
    reservedConcurrency: 5
    events:
      - httpApi:
          path: /v1/plans/{id}
          method: post
          authorizers:
            TripCheckJwtAuthorizer:
              type: jwt
              identitySource: $request.header.Authorization
              audience:
                - 74mtj0sj8kpi7bckr84o2fskie
              issuerUrl: https://cognito-idp.ap-northeast-1.amazonaws.com/ap-northeast-1_fd8pKPCYd

  delete-plan:
    handler: src/functions/delete-plan.handler
    reservedConcurrency: 5
    events:
      - httpApi:
          path: /v1/plans/{id}
          method: delete
          authorizers:
            TripCheckJwtAuthorizer:
              type: jwt
              identitySource: $request.header.Authorization
              audience:
                - 74mtj0sj8kpi7bckr84o2fskie
              issuerUrl: https://cognito-idp.ap-northeast-1.amazonaws.com/ap-northeast-1_fd8pKPCYd

  # Map
  get-map:
    handler: src/functions/get-map.handler
    reservedConcurrency: 5
    events:
      - httpApi:
          path: /v1/maps
          method: get
          authorizers:
            TripCheckJwtAuthorizer:
              type: jwt
              identitySource: $request.header.Authorization
              audience:
                - 74mtj0sj8kpi7bckr84o2fskie
              issuerUrl: https://cognito-idp.ap-northeast-1.amazonaws.com/ap-northeast-1_fd8pKPCYd

resources:
  Resources:
    PlanTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
